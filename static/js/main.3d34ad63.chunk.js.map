{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAIcA,EAAc,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,cAAiB,EACPC,mBAAS,IADF,mBACnCC,EADmC,KACvBC,EADuB,KAc1C,OACO,sBAAMC,SAVM,SAACC,GACjBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IACxBR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACtCN,EAAc,MAMhB,SACK,uBACLO,KAAK,OACLC,MAAQT,EACRU,SAjBiB,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,a,+BCLlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEDI,MAAMF,GAFL,cAEbG,EAFa,gBAGEA,EAAIC,OAHN,uBAGZC,EAHY,EAGZA,KAEDC,EAAMD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACvB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAOF,EAAIE,MACXV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QATtB,kBAcZM,GAdY,4CAAH,sDCAPO,EAAc,SAAC,GAAmB,EAAjBJ,GAAkB,IAAfC,EAAc,EAAdA,MAAOV,EAAO,EAAPA,IAEpC,OACI,sBAAKc,UAAU,2CAAf,UACG,qBAAKC,IAAKf,EAAKgB,IAAMN,IACrB,4BAAIA,QCHFO,EAAU,SAAC,GAAc,IAAbnB,EAAY,EAAZA,SAAY,ECCT,SAACA,GAAY,IAAD,EACXd,mBAAS,CAC9BqB,KAAK,GACLa,SAAS,IAHuB,mBAC7BC,EAD6B,KACtBC,EADsB,KAiBpC,OAZCC,qBAAW,WACRxB,EAAQC,GACPwB,MAAK,SAAAC,GACEH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAIrB,CAACpB,IAGGqB,EDjBgBK,CAAa1B,GAA9BO,EAD2B,EAC3BA,KAAMa,EADqB,EACrBA,QAEZ,OACI,sBAAMJ,UAAU,eAAhB,UACC,oBAAIA,UAAU,oBAAd,SAAmChB,IACpC,sBAAKgB,UAAU,YAAf,UACCI,GAAW,4CAGTb,EAAKE,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEIA,GADEA,EAAIC,cEXRgB,EAAc,WAAK,IAAD,EACOzC,mBAAS,CAAC,KADjB,mBACrB0C,EADqB,KACT3C,EADS,KAM5B,OACK,sBAAK+B,UAAU,UAAf,UACA,8CACA,cAAC,EAAD,CAAa/B,cAAeA,IAGpB2C,EAAWnB,KAAK,SAAAT,GACZ,OAAO,cAAC,EAAD,CAEPA,SAAUA,GADLA,U,MCdzB6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.3d34ad63.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react/cjs/react.development\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n export const AddCategory = ({setCategories})=>{\r\n     const [inputValue, setInputValue]= useState('');\r\n    const handleInputChange= (e)=>{\r\n        setInputValue(e.target.value);\r\n    }\r\n    const handleSubmit= (e)=>{\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2){\r\n              setCategories( cats => [inputValue,...cats]);\r\n              setInputValue('');\r\n      \r\n        }\r\n\r\n    }\r\n     return (\r\n            <form onSubmit={handleSubmit}>\r\n                 <input\r\n            type='text' \r\n            value= {inputValue}\r\n            onChange={handleInputChange}\r\n\r\n            /> \r\n            </form>\r\n         \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\nexport const getGifs = async(category)=>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=LhH1vPpeOd9TEY1ujdnMQJ7cyQA1bWOh`;\r\n    const res = await fetch(url);\r\n    const {data} = await res.json();\r\n    \r\n    const gifs= data.map(img =>{\r\n        return {\r\n            id:img.id,\r\n            title: img.title,\r\n            url:img.images?.downsized_medium.url\r\n        }\r\n        \r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react';\r\n\r\nexport const GifGridItem = ( {id,title, url})=>{\r\n   \r\n    return (\r\n        <div className='card animate__animated animate__fadeInUp'>\r\n           <img src={url} alt= {title}/>\r\n           <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport {GifGridItem }from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({category})=>{\r\n    const{data, loading} = useFetchGifs(category);\r\n   \r\n    return (\r\n        < div className='content-grid'>\r\n         <h3 className='animate__fadeInUp'>{category}</h3>\r\n        <div className='card-grid'>\r\n        {loading && <p>Cargando...</p>}\r\n\r\n           {\r\n           data.map( img =>(\r\n           <GifGridItem \r\n           key ={img.id}\r\n           {...img} />\r\n         ))\r\n           }\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default GifGrid;","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\n\r\nexport const useFetchGifs = (category)=>{\r\n    const [state, setState]= useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n     useEffect( ()=>{\r\n        getGifs(category)\r\n        .then(imgs =>{\r\n                setState({\r\n                    data:imgs,\r\n                    loading:false\r\n                  }) \r\n        \r\n        });\r\n    }, [category])\r\n    \r\n\r\n    return state;\r\n}","import React, { useState } from \"react\";\r\nimport {AddCategory} from './components/AddCategory'\r\nimport {GifGrid} from \"./components/GifGrid\";\r\n\r\n\r\nexport const GifExpertApp= ()=>{\r\n   const [categories, setCategories]= useState(['']);\r\n//    const handleAdd = ()=>{\r\n//        setCategories();\r\n//    }\r\n   \r\n   return (\r\n        <div className='content'>\r\n        <h1>GifExpertApp</h1>\r\n        <AddCategory setCategories={setCategories}/>        \r\n       \r\n            {\r\n                categories.map( category =>{\r\n                    return <GifGrid\r\n                    key={category}\r\n                    category={category}/>\r\n                })\r\n            }\r\n       </div>\r\n\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}